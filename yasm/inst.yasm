# Copyright (c) 2022 Jeff Berkowitz (pdxjjb@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Instruction definitions for yasm. First, define a no-op (all 0xFF...)
# one byte of microcode at a time - K3, ..., K0.
.set K3_NONE "src1=r3 src2=const_n1 dst=cond_r3"
.set K2_NONE "acn=alu_pass alu_ctl=alu_none alu_load_hold=no alu_load_flgs=no"
.set K1_NONE "sysdata_src=bus_none reg_in_mux=from_bus rcw_routing=rcw_normal sysaddr_src=addr_gr dst_wr_en=no"
.set K0_NONE "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

.set NOOP "K3_NONE K2_NONE K1_NONE K0_NONE"

# Microcode for an instruction fetch cycle (r3) => IR and phi1 of r3 += 2.
.set FETCH_K3 "src1=r3 src2=const_p2 dst=cond_r3"
.set FETCH_K2 "acn=alu_add alu_ctl=alu_phi1 alu_load_hold=yes alu_load_flgs=no"
.set FETCH_K1 "sysdata_src=bus_mem reg_in_mux=from_bus rcw_routing=rcw_normal sysaddr_src=addr_gr dst_wr_en=no"
.set FETCH_K0 "rw=read m16_en=bit16 load_ir=yes rcw_ir_uc=rcw_from_uc carry_en=force_low load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"
.set FETCH "FETCH_K3 FETCH_K2 FETCH_K1 FETCH_K0"

# Microcode for an instruction decode cycle.
# Issue phi2 of r3 += 2 during the decode and clock the result to r3.
# We could do both alu_phi2 and load the ALU port 2 holding register 
# with IR as a heuristic optimization, but the control logic doesn't
# support this combination - live and learn.
.set DECODE_K3 "src1=r3 src2=const_n1 dst=r3"
.set DECODE_K2 "acn=alu_add alu_ctl=alu_phi2 alu_load_hold=no alu_load_flgs=no"
.set DECODE_K1 "sysdata_src=bus_none reg_in_mux=from_alu rcw_routing=rcw_normal sysaddr_src=addr_gr dst_wr_en=yes"
.set DECODE_K0 "K0_NONE"
.set DECODE "DECODE_K3 DECODE_K2 DECODE_K1 DECODE_K0"

# Microcode to increment the PC without writing the result anywhere
# Note that "FETCH" expands to define the value of the load_ir bit,
# which is then overwritten by another load_ir reference to its right.
# This is a supported feature of the microassembler: the source is
# read from left to right, and the rightmost field definition "wins".
# The NO_FETCH and NO_DECODE microcycles are used for immediates.
.set NO_FETCH "FETCH load_ir=no"
.set NO_DECODE "DECODE"

.include "op0-7.yasm"
.include "op8.yasm"
.include "op9.yasm"
.include "opA.yasm"
.include "opB.yasm"
.include "opC.yasm"
.include "opD.yasm"
.include "opE-F.yasm"
