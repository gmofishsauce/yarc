# Copyright (c) 2023 Jeff Berkowitz (pdxjjb@gmail.com)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Microcode for YARC instructions.
# Opcodes 0000 through 7FFF are jumps and calls.

# Note: the hardware maps all even opcodes 0000 - 7FFE to actual opcode 0xFE
# and all odd opcodes 0001 - 7FFF to actual opcode 0xFF. The microcode there
# implements JMP and CALL.

# Absolute call and jump microcode: move the instruction register contents to
# r3, the program counter. In the instruction which is now in the instruction
# register, Bit 0 selected between the 0xFE microcode and the 0xFF microcode.
# For the move to r3, we unconditionally force it low with the magic microcode
# bit "ir0_en" in K0 in order to keep the address even. The microcode to push
# the address for call instructions follows this.
.set K3_ABS "src1=r3 src2=const_n1 dst=r3"
.set K2_ABS "K2_NONE"
.set K1_ABS "sysdata_src=bus_ir reg_in_mux=from_bus rcw_routing=rcw_normal sysaddr_src=addr_gr dst_wr_en=yes"
.set K0_ABS "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=force_low"

# Absolute call. The instruction register contains the target address, which
# is necessarily < 2^15. The hardware translates that to opcode 0xFE where we
# place the microcode to push the PC, decrement the stack pointer, and move the
# instruction register to R3.

# phi1 r2 -= 2
.set K3_PHI1_DECSP "src1=r2 src2=const_n2 dst=cond_r3"
.set K2_PHI1_DECSP "acn=alu_add alu_ctl=alu_phi1 alu_load_hold=yes alu_load_flgs=no"
.set K1_PHI1_DECSP "sysdata_src=bus_none reg_in_mux=from_bus rcw_routing=rcw_normal sysaddr_src=addr_gr dst_wr_en=no"
.set K0_PHI1_DECSP "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=force_low load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# phi2 r2 -= 2 and store in r2
.set K3_PHI2_DECSP "src1=r3 src2=const_n1 dst=r2"
.set K2_PHI2_DECSP "acn=alu_add alu_ctl=alu_phi2 alu_load_hold=no alu_load_flgs=no"
.set K1_PHI2_DECSP "sysdata_src=bus_none reg_in_mux=from_alu rcw_routing=rcw_normal sysaddr_src=addr_gr dst_wr_en=yes"
.set K0_PHI2_DECSP "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# store r3 @r2
.set K3_STR3 "src1=r2 src2=r3 dst=cond_r3"
.set K2_STR3 "acn=alu_pass alu_ctl=alu_none alu_load_hold=no alu_load_flgs=no"
.set K1_STR3 "sysdata_src=bus_gr reg_in_mux=from_bus rcw_routing=rcw_normal sysaddr_src=addr_gr dst_wr_en=no"
.set K0_STR3 "rw=write m16_en=bit16 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# Call. 6 cycles: decrement SP by 2, save PC, load PC, fetch and decode.
.opcode call 0xFE 1 .abs
.slot K3_PHI1_DECSP K2_PHI1_DECSP K1_PHI1_DECSP K0_PHI1_DECSP ;
.slot K3_PHI2_DECSP K2_PHI2_DECSP K1_PHI2_DECSP K0_PHI2_DECSP ;
.slot K3_STR3 K2_STR3 K1_STR3 K0_STR3 ;
.slot K3_ABS K2_ABS K1_ABS K0_ABS ;
.slot FETCH ;
.slot DECODE ;
.endopcode

# Absolute jump. The instruction register contains the target address, which
# is necessarily < 2^15. The hardware translates that to opcode 0xFF, where
# we place the microcode to move the instruction register to R3. In the
# microcode we suppress bit 0, which has to be a 1 for a jump, to construct
# the target address, which has to be even.

.opcode jmp 0xFF 1 .abs
.slot K3_ABS K2_ABS K1_ABS K0_ABS ;
.slot FETCH ;
.slot DECODE ;
.endopcode
