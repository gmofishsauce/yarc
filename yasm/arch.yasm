# Copyright (c) 2022 Jeff Berkowitz (pdxjjb@gmail.com)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Architecture file for YARC. All symbols defined here are local to
# the microcode. Global symbols that will be visible in the assembly
# language should be defined in globals.yasm.

# The "no op" value for all microcode fields is all 1s. We fill the
# control store with 0xFF FF FF FF ... before writing any microcode.

.set no  1 # default ; noop ; don't do the action (clock enables, etc.)
.set yes 0 # non-default ; do the non-default action

# For the carry-in enable carry_en and the instruction register bit
# zero enable ir0_en, the alternatives are pass (enable the value of
# the carry flag or IR bit 0 to the destination) or force_low.
.set pass 1       # default - pass the carry or IR bit
.set force_low 0  # non-default - force the bit to zero

.set src1_none 3 # arbitrary value to use when src1 is not used
.set src2_none 7 # arbitrary value to use when src2 is not used
.set dst_none  7 # arbitrary value to use when dst_wr_en is high

# data bus drivers for sysdata_src
.set bus_gr    0        # general register drives bus
.set bus_addr  1        # address bus drives the data bus
.set bus_ir    2        # instruction register drives bus
.set bus_f     3        # flags register drives bus
.set bus_mem   4        # memory drives bus (memory read)
.set bus_tbd_5 5        # unused
.set bus_tbd_6 6        # unused
.set bus_none  7        # "none"

# address bus drivers for sysaddr_src
.set addr_gr   3        # general register drives address
.set addr_alu  2        # ALU result holding register drives address
.set addr_ix   1        # index register drives address
.set addr_op   0        # gr drives bus, holding reg => ix[ACN1:0]

# General register conditional writes. These
# are primarily targeted as enabling branches
# but could be used for conditional moves.
.set cond_r0   4
.set cond_r1   5
.set cond_r2   6
.set cond_r3   7

# Register input mux
.set from_bus  1    # register input from sysdata
.set from_alu  0    # register input from ALU output

# ALU operations (ACN values for use with .acn)
.set alu_add   0x00
.set alu_sub   0x01 # src2 - src1
.set alu_rsub  0x02 # reverse subtract src1 - src2
.set alu_adc   0x03 # add with carry
.set alu_sbb   0x04 # subtract src2 - src1 with borrow
.set alu_rsbb  0x05 # reverse subtract with borrow
.set alu_neg   0x06 # arithmetic negate
.set alu_cmp   0x07 # src2 - src1, no dst, set flags
.set alu_nand  0x08 # bit clear
.set alu_or    0x09 # bit set
.set alu_xor   0x0A # bitwise xor
.set alu_not   0x0B # bitwise not
.set alu_rot   0x0C # RL, RR, RLC, RRC
.set alu_shf   0x0D # ASR, ASL (LSL), LSR2, and LSR
.set alu_0x0E  0x0E # unassigned
.set alu_pass  0x0F # pass port2 to output - default when all FFs

# ALU control
.set alu_phi1   0   # operate on low 8 bits
.set alu_phi2   1   # operate on high 8 bits and commit
.set alu_in     2   # no alu operation; sysdata transceivers inbound
.set alu_none   3   # no operation

# Memory and I/O read/write control bit rw
.set read		1
.set write		0

# 8-bit versus 16-bit cycle control m16_en
.set bit8		1
.set bit16		0

# RCW from instruction register IR or from microcode UC?
.set rcw_from_uc 1
.set rcw_from_ir 0
# Similarly for the ALU Condition Nybble (ACN)
.set acn_from_uc 1
.set acn_from_ir 0

# Kludge for index register support: when set to normal, the RCW:src1 field
# drives the general register port 1 address (2 bits) and RCW:src2 drives
# the general register port 2 address. When set to cross, the RCW:src1 field
# drives both addresses and the third bit (:2) of port 2 address is zero.
# This allows using the RCW:src1 field of the instruction word to select a
# general register to be written to memory though the port 2 transceivers.
# In such a cycle, the sysaddr bus should not be driven by the general
# registers because the src1 and src2 registers are the same. This setting
# is intended for use when an index register provides the memory address.
.set rcw_normal 1
.set rcw_cross  0

# Microcode words, 32 bits
# K3: register control word 31:24
#
# Note about src2: it only partially determines the content of the ALU port 2 bus.
# Its meaning depends on both alu_ctl and sysdata_src. When sysdata_src is 0, the
# bit :29 is ignored and bits 28:27 determine which general register 0..3 drives
# the sysdata bus. This allows general registers to be written to memory. Otherwise,
# when alu_ctl has value 2, sysdata is driven inbound to the port 2 bus. Here bits
# 28:27 are ignored. Bit :29 = 0 causes a 16-bit transfer inbound from sysdata and
# bit :29 = 1 causes a sign-extended 8-bit transfer, e.g. for a branch offset. The
# ALU port 2 holding register should be clocked on such cycles (alu_load_hold, below,
# should be 0) or they become noops. Finally, when sysdata_src is not 0 and alu_ctl
# is not 2, values 0..3 specify a general register 0..3 and values 4..7 specify a
# a small constant -2, -1, 1, or 2 specified by the const_xx value above to drive
# the port2 bus.
#
# src1 is far simpler: it's just a 2-bit field that specifies a general register.
# This value goes out on the address bus unconditionally (this may change).
#
# The dst field specifies a general register when its value is in 0..3. The values
# 4..7 specify a conditional write based on the alu flag specifier, instruction
# bits 11:8. This is sufficient to support all the standard branch instructions,
# but it's inflexible because any other type of conditional must use another 16
# precious opcodes to encode the condition specifier in the low 4 bits.

.bitfield src1          32  31:30   # contains a gr
.bitfield src2          32  29:27   # contains a gr (3..0) or a constant reg (7..4)
.bitfield dst           32  26:24   # contains a gr (3..0) or a conditional gr (7..4)

# alu 23:16
# alu_ctl = 2 is called alu_in_xcv_en# in https://circuitverse.org/simulator/edit/alu-controls-second-try
.bitfield acn           32  23:20   # ALU Condition Nybble - 1 of 16 ALU operations or conditional tests
.bitfield alu_ctl       32  19:18   # 0 = alu_phi1, 1 = alu_phi2, 2 = sysdata inbound, 3 = none
.bitfield alu_load_hold 32  17:17   # when low, clock the port 2 ALU holding register
.bitfield alu_load_flgs 32  16:16   # when low, clock the flags (most ALU phi2 or write to flags)

# busses and stack 15:8
.bitfield sysdata_src   32   15:13  # 1 of 8 data bus drivers (bus_gr sp ir f mem tbd tbd none)
.bitfield reg_in_mux    32   12:12  # register input mux, 1 = sysdata, 0 = alu output
.bitfield rcw_routing   32   11:11  # rcw_normal or rcw_cross, described above.
.bitfield sysaddr_src   32   10:9   # sysaddr_src (addr_gr alu ix or none)
.bitfield dst_wr_en     32    8:8   # enable (conditional or unconditional) write to GRs

# control lines 7:0
.bitfield rw            32    7:7   # read/write# line for all memory and I/O transfers
.bitfield m16_en        32    6:6   # enable 16-bit memory or I/O cycle (default 8 bit)
.bitfield load_ir       32    5:5   # clock the IR
.bitfield rcw_ir_uc     32    4:4   # RCW from IRL7:0 when low, from K31:24 when high
.bitfield carry_en		32	  3:3   # Force carry-in low when low (for add vs adc)
.bitfield load_flgs_mux	32	  2:2	# From sysdata when high else from ALU result flags
.bitfield acn_ir_uc		32    1:1   # ACN from IRH11:8 when low, from K23:30 when high
.bitfield ir0_en        32    0:0   # Force IR:0 to sysdata low when low (for jumps)
