# Copyright (c) 2023 Jeff Berkowitz (pdxjjb@gmail.com)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Microcode for YARC instructions.
# Opcodes C000 through CFFF are loads and stores

# LDIF - load immediate byte (really nybble) to flags register 3:0
# Only the low order 4 bits are relevant - they are V N Z C in bits 3:0.
# There is no RCW - src1, src2, and dst are not used.

.set K3_LDIF K3_NONE # no RCW in this instruction
.set K2_LDIF "acn=alu_pass alu_ctl=alu_none alu_load_hold=no alu_load_flgs=yes"
.set K1_LDIF "sysdata_src=bus_ir reg_in_mux=from_bus rcw_routing=rcw_normal sysaddr_src=addr_gr dst_wr_en=no"
.set K0_LDIF "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

.opcode ldif 0xF0 1 .immb
.slot K3_LDIF K2_LDIF K1_LDIF K0_LDIF ;
.slot FETCH ;
.slot DECODE ;
.endopcode

# LDIW - load immediate word to register
# RCW from instruction (dst field)
# ACN from microcode
# 1 cycle to load the register and do phi1 of PC += 2
# A second cycle to complete the PC += 2
.set K3_LDIW K3_NONE # RCW from instruction
.set K2_LDIW "acn=alu_add alu_ctl=alu_phi1 alu_load_hold=yes alu_load_flgs=no"
.set K1_LDIW "sysdata_src=bus_mem reg_in_mux=from_bus rcw_routing=rcw_normal sysaddr_src=addr_gr dst_wr_en=yes"
.set K0_LDIW "rw=read m16_en=bit16 load_ir=no rcw_ir_uc=rcw_from_ir carry_en=force_low load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

.opcode ldiw 0xC8 4 .immw .dst .src1=r3 .src2=const_p2
.slot K3_LDIW K2_LDIW K1_LDIW K0_LDIW ; # do the move and also alu cycle 1
.slot NO_DECODE ; # second cycle of PC += 2
.slot FETCH ;
.slot DECODE ;
.endopcode

# LDRW - load memory word
# RCW from instruction
# .opcode ldrw 0xA4 4 .src1 .src2=7 .dst
# === TODO ===
# .endopcode

# LDRB - load memory byte
# RCW from instruction
# .opcode ldrb 0xA5 3 .src1 .src2=7 .dst
# === TODO ===
# .endopcode

# STRW - store register to memory word (register indirect)
# RCW from instruction
.set K3_STRW K3_NONE
.set K2_STRW "acn=alu_pass alu_ctl=alu_none alu_load_hold=no alu_load_flgs=no"
.set K1_STRW "sysdata_src=bus_gr reg_in_mux=from_bus rcw_routing=rcw_normal sysaddr_src=addr_gr dst_wr_en=no"
.set K0_STRW "rw=write m16_en=bit16 load_ir=no rcw_ir_uc=rcw_from_ir carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

.opcode strw 0xA6 3 .src2 .src1 .dst=7
.slot K3_STRW K2_STRW K1_STRW K0_STRW ;
.slot FETCH ;
.slot DECODE ;
.endopcode

# STRB - store low byte of register in memory byte (register indirect)
# RCW from instruction
# .opcode strb 0xA7 3 .src1 .src2 .dst=7
# === TODO ===
# .endopcode

# TODO (require the new ALU hold => address bus feature)
# | 0xA8:RCW | LDDW   | immed16, dst | load direct register from @immed16 |
# | 0xA9:RCW | LDOW   | immed16, @src, dst | load register from @(src + immed16) |
# | 0xAA:RCW | STDW   | src, immed16 | store direct register to @immed16 |
# | 0xAB:RCW | STOW   | immed16, src, @dst | store register to @(dst + immed16)  |

.set K3_LDD "src1=r3 src2=const_n1 dst=cond_r3"
.set K2_LDD "acn=alu_pass alu_ctl=alu_none alu_load_hold=no alu_load_flgs=no"
# This next definition K1_LDD needs the new control bit to use the ALU holding register as an address
.set K1_LDD "sysdata_src=bus_none reg_in_mux=from_bus rcw_routing=rcw_normal sysaddr_src=addr_gr dst_wr_en=no"
.set K0_LDD "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# This is actually stow (sort of) because it does ADD instead of PASS
.opcode LDDW 0xA8 4 .immw .dst .src1=3 .src2=7
.slot K3_IR2HOLD K2_IR2HOLD K1_IR2HOLD K0_IR2HOLD ;
.slot K3_ADD_PHI1 K2_ADD_PHI1 K1_ADD_PHI1 K0_ADD_PHI1 ;
.slot K3_ADD_PHI2 K2_ADD_PHI2 K1_ADD_PHI2 K0_ADD_PHI2 ;
.slot K3_LDD K2_LDD K1_LDD K0_LDD ;
.endopcode
