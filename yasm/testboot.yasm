# Copyright (c) 2023 Jeff Berkowitz (pdxjjb@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# startup code

.set REGSAVE 0x7000		# Avoid 0x7000..0x7800. Stack grows down from here.
.set RESULTS 0x7710     # Put test results here ...
.set LINEBUF 0x7740		# to  here, where the eventual line buffer starts.

# "Vectors" - jump to HALT when done, probably via success:, fail_pos:,
# or fail_neg: at the end of a test or all tests.

ZERO:
	jmp init			# execution starts here. Initialize and test.
HALT:					# execution always ends here, result in r0.
	jmp HALT			# also SP = 0x7000 if success, lower if failure.
success:				# load success code to r0 and halt.
	ldiw 0xD00D, r0		# Dood! It worked!
	jmp  HALT
fail_pos:				# positive test failed, detailed code in r0
	ldiw 0xBAD1, r1
	jmp HALT
fail_neg:				# negative test failed, detailed code in r0
	ldiw 0xBAD2, r1
	jmp HALT
init:					# initialize the machine and run tests (for now)
	ldiw REGSAVE, SP	# stack is predecrement push / pop postincrement

# Run all the tests

run_tests:
	jmp  debug_ix		# does not return (for now)
	call test_c
	call test_z
	call test_n
	call test_v
	jmp  success

debug_ix:
	ldiw 0x7FF2, r2		# I/O address that toggles decoder line 1
	ldiw 0x7FF2, r1
	
db_ix_loop:
	t1					# test opcode in opE-F.yasm
	strw	r2, r1
	jmp  db_ix_loop
	
# === tests ===
# Test the flags, starting with the carry flag
test_c:
	ldif 0x01			# set c flag in flags
	br	 c, c_pos_ok
	ldiw 0x01, r0
	jmp  fail_pos
c_pos_ok:
	br	 nc, c_neg_fail
	ret					# success
c_neg_fail:
	ldiw 0x02, r0
	jmp	 fail_neg

# Test the zero flag
test_z:
	ldif 0x02			# set z flag in flags
	br	 z, z_pos_ok
	ldiw 0x03, r0
	jmp  fail_pos
z_pos_ok:
	br	 nz, z_neg_fail
	ret					# success
z_neg_fail:
	ldiw 0x04, r0
	jmp	 fail_neg

test_n:
	ldif 0x04			# set n flag in flags
	br	 n, n_pos_ok
	ldiw 0x05, r0
	jmp  fail_pos
n_pos_ok:
	br	 nn, n_neg_fail
	ret					# success
n_neg_fail:
	ldiw 0x06, r0
	jmp	 fail_neg

test_v:
	ldif 0x08			# set v flag in flags
	br	 v, v_pos_ok
	ldiw 0x07, r0
	jmp  fail_pos
v_pos_ok:
	br	 nv, v_neg_fail
	ret					# success
v_neg_fail:
	ldiw 0x08, r0
	jmp	 fail_neg

# Here is the program I want to be able to write.
# In order to do this I need to add the addressing
# feature to the YARC, implement .db, .dw, and .align,
# add the new microcode, and implement the system
# call feature.

# message:
# .db 'Hark! A YARC!', 0
# .align 2
# 
# PRINT_HELLO:
# 	pushiw	message
# 	pushiw	LINEBUF
# 	call	copy
# 	addiw	4, SP
# 	system	sendbuf
# 	jmp HALT
# 
# srcaddr: .dw 0
# dstaddr: .dw 0

# Copy bytes from from the first argument to the second,
# stopping after copying the terminating nul byte. We
# need memory locations for both addresses because of
# YARC's desperate shortage of registers.

# copy:
# 	ldow	6, @SP, r0	# load r0 from @(SP + 6)
# 	stdw r0, @srcaddr	# first argument (srcaddr)
# 	ldow	4, @SP, r0	# load r0 from @(SP + 4)
# 	stdw r0, @dstaddr	# second argument (dstaddr)
# 
# copyloop:
# 	lddw r0, @srcaddr   # load the srcaddr
# 	ldrb @r0, r1		# load a byte from source to r1
# 	addib 1, r0
# 	stdw r0, @srcaddr   # increment and save srcaddr
# 	lddw @dstaddr, r0	# load the destination addr to r0
# 	strb r1, @r0		# store the byte there
# 	addib 1, r0			# increment and save the dstaddr
# 	stdw r0, @dstaddr
# 	cmp r1, 0			# was that saved byte a nul?
# 	br nz, copyloop		# no, continue
# 	ret					# done

# End of the goal program.
