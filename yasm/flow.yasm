# Copyright (c) 2022 Jeff Berkowitz (pdxjjb@gmail.com)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Flow control instructions.

# Conditional branch. Move the instruction register to the ALU port 2
# holding register with byte sign extension. Add the r3 to the holding
# register and conditionally write the result back to r3 based on the
# value of flag selected by the ACN from the instruction register.

# Microcode to move the instruction register to the ALU port 2 holding register
# The high order bit of the src2 field needs to be set along with alu_ctl=alu_in
# The register input mux and the write control dst_wr_en do not matter (off)
.set K3_IR2HOLD "src1=r3 src2=4 dst=cond_r3"
.set K2_IR2HOLD "acn=alu_0x0F alu_ctl=alu_in alu_load_hold=yes alu_load_flgs=no"
.set K1_IR2HOLD "sysdata_src=bus_ir reg_in_mux=from_bus dst_wr_en=no"
.set K0_IR2HOLD "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# Add the ALU holding register to r3 (phase 1) because alu_load_hold=no
.set K3_ADD_PHI1 "src1=r3 src2=const_n1 dst=cond_r3"
.set K2_ADD_PHI1 "acn=alu_add alu_ctl=alu_phi1 alu_load_hold=no alu_load_flgs=no"
.set K1_ADD_PHI1 "sysdata_src=bus_none reg_in_mux=from_bus dst_wr_en=no"
.set K0_ADD_PHI1 "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=force_low load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# Add the ALU holding register to r3 (phase 2) but leave the result in the ALU holding register
.set K3_ADD_PHI2 "src1=r3 src2=const_n1 dst=r3" # not used
.set K2_ADD_PHI2 "acn=alu_add alu_ctl=alu_phi2 alu_load_hold=no alu_load_flgs=no"
.set K1_ADD_PHI2 "sysdata_src=bus_none reg_in_mux=from_alu dst_wr_en=no"
.set K0_ADD_PHI2 "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# Conditionally move the ALU result register to the PC based on the condition in the IR
.set K3_CMOVE "src1=r3 src2=const_n1 dst=cond_r3"
.set K2_CMOVE "acn=alu_0x0F alu_ctl=alu_none alu_load_hold=no alu_load_flgs=no"
.set K1_CMOVE "sysdata_src=bus_none reg_in_mux=from_alu dst_wr_en=yes"
.set K0_CMOVE "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_ir ir0_en=pass"

.opcode br 0x90 2 .acn .rel
.slot K3_IR2HOLD  K2_IR2HOLD  K1_IR2HOLD  K0_IR2HOLD  ;
.slot K3_ADD_PHI1 K2_ADD_PHI1 K1_ADD_PHI1 K0_ADD_PHI1 ;
.slot K3_ADD_PHI2 K2_ADD_PHI2 K1_ADD_PHI2 K0_ADD_PHI2 ;
.slot K3_CMOVE    K2_CMOVE    K1_CMOVE    K0_CMOVE    ;
.slot FETCH ;
.slot DECODE ;
.endopcode

# Now we need to copy the microcode into the rest of the opcode slots for
# all the different condition codes (the different values of the .acn fixup).
.dup __br1  0x91 br
.dup __br2  0x92 br
.dup __br3  0x93 br
.dup __br4  0x94 br
.dup __br5  0x95 br
.dup __br6  0x96 br
.dup __br7  0x97 br
.dup __br8  0x98 br
.dup __br9  0x99 br
.dup __brA  0x9A br
.dup __brB  0x9B br
.dup __brC  0x9C br
.dup __brD  0x9D br
.dup __brE  0x9E br
.dup __brF  0x9F br

# Absolute call and jump microcode: move the instruction register contents to
# r3, the program counter. In the instruction which is now in the instruction
# register, Bit 0 selected between the 0xFE microcode and the 0xFF microcode.
# For the move to r3, we unconditionally force it low with the magic microcode
# bit "ir0_en" in K0 in order to keep the address even. The microcode to push
# the address for call instructions follows this.
.set K3_ABS "src1=r3 src2=const_n1 dst=r3"
.set K2_ABS "K2_NONE"
.set K1_ABS "sysdata_src=bus_ir reg_in_mux=from_bus dst_wr_en=yes"
.set K0_ABS "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=force_low"

# Absolute call. The instruction register contains the target address, which
# is necessarily < 2^15. The hardware translates that to opcode 0xFE where we
# place the microcode to push the PC, decrement the stack pointer, and move the
# instruction register to R3.

# phi1 r2 -= 2
.set K3_PHI1_DECSP "src1=r2 src2=const_n2 dst=cond_r3"
.set K2_PHI1_DECSP "acn=alu_add alu_ctl=alu_phi1 alu_load_hold=yes alu_load_flgs=no"
.set K1_PHI1_DECSP "sysdata_src=bus_none reg_in_mux=from_bus dst_wr_en=no"
.set K0_PHI1_DECSP "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=force_low load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# phi2 r2 -= 2 and store in r2
.set K3_PHI2_DECSP "src1=r3 src2=const_n1 dst=r2"
.set K2_PHI2_DECSP "acn=alu_add alu_ctl=alu_phi2 alu_load_hold=no alu_load_flgs=no"
.set K1_PHI2_DECSP "sysdata_src=bus_none reg_in_mux=from_alu dst_wr_en=yes"
.set K0_PHI2_DECSP "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# store r3 @r2
.set K3_STR3 "src1=r2 src2=r3 dst=cond_r3"
.set K2_STR3 "acn=alu_0x0F alu_ctl=alu_none alu_load_hold=no alu_load_flgs=no"
.set K1_STR3 "sysdata_src=bus_gr reg_in_mux=from_bus dst_wr_en=no"
.set K0_STR3 "rw=write m16_en=bit16 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# Call. 6 cycles: decrement SP by 2, save PC, load PC, fetch and decode.
.opcode call 0xFE 1 .abs
.slot K3_PHI1_DECSP K2_PHI1_DECSP K1_PHI1_DECSP K0_PHI1_DECSP ;
.slot K3_PHI2_DECSP K2_PHI2_DECSP K1_PHI2_DECSP K0_PHI2_DECSP ;
.slot K3_STR3 K2_STR3 K1_STR3 K0_STR3 ;
.slot K3_ABS K2_ABS K1_ABS K0_ABS ;
.slot FETCH ;
.slot DECODE ;
.endopcode

# Return from function or subroutine. Pop the stack into r3
# and increment r2.

# Q: can we merge this with the next cycle (phi1 of increment)?
.set K3_LDR3 "src1=r2 src2=const_n1 dst=r3"
.set K2_LDR3 "acn=alu_0x0F alu_ctl=alu_none alu_load_hold=no alu_load_flgs=no"
.set K1_LDR3 "sysdata_src=bus_mem reg_in_mux=from_bus dst_wr_en=yes"
.set K0_LDR3 "rw=read m16_en=bit16 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# phi1 of increment SP (Q: merge with previous cycle?)
.set K3_PHI1_INCSP "src1=r3 src2=const_p2 dst=cond_r3"
.set K2_PHI1_INCSP "acn=alu_add alu_ctl=alu_phi1 alu_load_hold=yes alu_load_flgs=no"
.set K1_PHI1_INCSP "sysdata_src=bus_none reg_in_mux=from_bus dst_wr_en=no"
.set K0_PHI1_INCSP "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=force_low load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# phi2 of increment SP
.set K3_PHI2_INCSP "src1=r3 src2=const_n1 dst=r2"
.set K2_PHI2_INCSP "acn=alu_add alu_ctl=alu_phi2 alu_load_hold=no alu_load_flgs=no"
.set K1_PHI2_INCSP "sysdata_src=bus_none reg_in_mux=from_alu dst_wr_en=yes"
.set K0_PHI2_INCSP "rw=read m16_en=bit8 load_ir=no rcw_ir_uc=rcw_from_uc carry_en=pass load_flgs_mux=from_bus acn_ir_uc=acn_from_uc ir0_en=pass"

# TODO - ret
.opcode ret 0xF2 0
.slot K3_LDR3 K2_LDR3 K1_LDR3 K0_LDR3 ;
.slot K3_PHI1_INCSP K2_PHI1_INCSP K1_PHI1_INCSP K0_PHI1_INCSP ;
.slot K3_PHI2_INCSP K2_PHI2_INCSP K1_PHI2_INCSP K0_PHI2_INCSP ;
.slot FETCH ;
.slot DECODE ;
.endopcode

# Absolute jump. The instruction register contains the target address, which
# is necessarily < 2^15. The hardware translates that to opcode 0xFF, where
# we place the microcode to move the instruction register to R3. In the
# microcode we suppress bit 0, which has to be a 1 for a jump, to construct
# the target address, which has to be even.

.opcode jmp 0xFF 1 .abs
.slot K3_ABS K2_ABS K1_ABS K0_ABS ;
.slot FETCH ;
.slot DECODE ;
.endopcode
