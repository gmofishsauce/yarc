<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>YARC Microcode Definition</title>

	<style>
	body {
	  background-color: linen;
	  margin-left: 40px;
	  font-family: Arial, Helvetica, sans-serif;
	}

	pre {
	  font-family: "Lucida Console", "Courier New", monospace;
	}

	h1 {
	  color: maroon;
	}

	</style>

    <script>

	window.onload = (event) => {
	  collect();
	};

	function gebi(s) {
	  return document.getElementById(s);
	}

	function collect() {
	  const kmap = new Map();
	  const comments = new Map();
	  kmap.set("k3", 0xFF); kmap.set("k2", 0xFF); kmap.set("k1", 0xFF); kmap.set("k0", 0xFF);
	  comments.set("k3", ""); comments.set("k2", ""); comments.set("k1", ""); comments.set("k0", "");

	  Array.from(gebi('all').elements).forEach((ctl) => {
		console.log(ctl.id + ": " + ctl.value);
		a = ctl.id.split("-");
		if (a.length == 4 && a[0].startsWith("k")) { // if it's a "k control" (microcode setting):
		  // a[0] is the k-register; a[1] is the field name; a[2] is the AND pattern; a[3] is the shift
		  console.log(ctl.id + ": " + a[0] + " " + a[1] + " " + a[2] + " " + a[3] + " " + kmap.get(a[0]));
		  kmap.set(a[0], kmap.get(a[0]) & ~(a[2] << a[3]));
		  kmap.set(a[0], kmap.get(a[0]) | ((ctl.value & a[2]) << a[3]));
		  comments.set(a[0], comments.get(a[0]) + " " + a[1] + "=" + ctl.options[ctl.selectedIndex].text);
		}
	  });

      contents.innerText =
		"WriteK(" +
			  "0x" + kmap.get("k3").toString(16) +
			", 0x" + kmap.get("k2").toString(16) +
			", 0x" + kmap.get("k1").toString(16) +
			", 0x" + kmap.get("k0").toString(16) +
		");" + "\n\n" +
		".set K3_TERM" + comments.get("k3") + "\n" +
		".set K2_TERM" + comments.get("k2") + "\n" +
		".set K1_TERM" + comments.get("k1") + "\n" +
		".set K0_TERM" + comments.get("k0")

	  // Apply a few rules, e.g. can't set K3 fields or ALU op if they come from the instruction.
		//	  rcw_from_instruction = gebi("k0-rcw_ir_uc-1-4").value == 0;
		//	  gebi("k3-src1-3-6").disabled = rcw_from_instruction;
		//	  gebi("k3-src2-7-3").disabled = rcw_from_instruction;
		//	  gebi("k3-dst-7-0").disabled = rcw_from_instruction;
		//	  gebi("k2-alu_op-15-4").disabled = rcw_from_instruction;
		//
		//	  if (gebi("k1-sysdata_src-7-5").value == 7) { // don't clock an undriven bus into anything
		//		if (gebi("k0-ir_clk-1-5").value == 0) {
		//		  alert("warning: clocking undriven sysdata into IR");
		//		}
		//		if (gebi("k0-rw-1-7").value == 0) {
		//		  alert("warning: clocking undriven sysdata into memory");
		//		}
		//		if (gebi("k1-dst_wr_en-1-0").value == 0 && gebi("k1-reg_in_mux-1-4").value == 1) {
		//		  alert("warning: clocking undriven sysdata into a general register");
		//		}
		//	  }
	}

    </script>
  </head>

  <body>
    <H1>
	  YARC Microcode Editor
    </H1>

	<form name=all id=all action="/this/form/cannot/be/submitted">
    
	  <p>
	  K3:
	  src1: <select id="k3-src1-3-6" onchange="collect()">
		<option value="0">r0</option>
		<option value="1">r1</option>
		<option value="2">r2</option>
		<option value="3" selected>r3</option>
	  </select> &nbsp;
	  src2: <select id="k3-src2-7-3" onchange="collect()">
		<option value="0">r0</option>
		<option value="1">r1</option>
		<option value="2">r2</option>
		<option value="3">r3</option>
		<option value="4">const_p2</option>
		<option value="5">const_p1</option>
		<option value="6">const_n2</option>
		<option value="7" selected>const_n1</option>
	  </select> &nbsp;
	  dst: <select id="k3-dst-7-0" onchange="collect()">
		<option value="0">r0</option>
		<option value="1">r1</option>
		<option value="2">r2</option>
		<option value="3">r3</option>
		<option value="4">cond_r0</option>
		<option value="5">cond_r1</option>
		<option value="6">cond_r2</option>
		<option value="7" selected>cond_r3</option>
	  </select>
	  </p>

	  <p id="k2">
	  K2:
	  acn: <select id="k2-acn-15-4" onchange="collect()">
        <option value="0">alu_add</option>
        <option value="1">alu_sub</option>
        <option value="2">alu_rsub</option>
        <option value="3">alu_adc</option>
        <option value="4">alu_sbb</option>
        <option value="5">alu_rsbb</option>
        <option value="6">alu_neg</option>
        <option value="7">alu_cmp</option>
        <option value="8">alu_nand</option>
        <option value="9">alu_or</option>
        <option value="10">alu_xor</option>
        <option value="11">alu_not</option>
        <option value="12">alu_rot</option>
        <option value="13">alu_shf</option>
        <option value="14">alu_0x0E</option>
        <option value="15" selected>alu_pass</option>
	  </select> &nbsp;
	  alu_ctl: <select id="k2-alu_ctl-3-2" onchange="collect()">
        <option value="0">alu_phi1</option>
        <option value="1">alu_phi2</option>
        <option value="2">alu_in</option>
        <option value="3" selected>alu_none</option>
	  </select> &nbsp;
	  alu_load_hold: <select id="k2-alu_load_hold-1-1" onchange="collect()">
		<option value="0">yes</option>
		<option value="1" selected>no</option>
	  </select> &nbsp;
	  alu_load_flgs: <select id="k2-alu_load_flgs-1-0" onchange="collect()">
		<option value="0">yes</option>
		<option value="1" selected>no</option>
	  </select>
	  &nbsp;
	  </p>

	  <p id="k1">
	  K1:
	  sysdata_src: <select id="k1-sysdata_src-7-5" onchange="collect()">
	    <option value="0">bus_gr</option>
	    <option value="1">bus_addr</option>
	    <option value="2">bus_ir</option>
	    <option value="3">bus_f</option>
	    <option value="4">bus_mem</option>
	    <option value="5">bus_tbd_5</option>
	    <option value="6">bus_tbd_6</option>
	    <option value="7" selected>bus_none</option>
	  </select> &nbsp;
	  reg_in_mux: <select id="k1-reg_in_mux-1-4" onchange="collect()">
	    <option value="0">from_alu</option>
	    <option value="1" selected>from_bus</option>
	  </select> &nbsp;
	  rcw_cross: <select id="k1-rcw_cross-1-3" onchange="collect()">
	    <option value="0">rcw_cross</option>
	    <option value="1" selected>rcw_normal</option>
	  </select> &nbsp;
	  sysaddr_src: <select id="k1-sysaddr_src-3-1" onchange="collect()">
	    <option value="0">addr_op</option>
	    <option value="1">addr_ix</option>
	    <option value="2">addr_alu</option>
	    <option value="3" selected>addr_gr</option>
      </select> &nbsp;
	  dst_wr_en: <select id="k1-dst_wr_en-1-0" onchange="collect()">
		<option value="0">yes</option>
		<option value="1" selected>no</option>
	  </select>
	  </p>

	  <p id="k0">
	  K0:
	  rw: <select id="k0-rw-1-7" onchange="collect()" onchange="collect()">
		<option value="0">write</option>
		<option value="1" selected>read</option>
	  </select> &nbsp;
	  m16_en: <select id="k0-m16_en-1-6" onchange="collect()">
		<option value="0">bit16</option>
		<option value="1" selected>bit8</option>
	  </select> &nbsp;
	  load_ir: <select id="k0-load_ir-1-5" onchange="collect()">
		<option value="0">yes</option>
		<option value="1" selected>no</option>
	  </select> &nbsp;
	  rcw_ir_uc: <select id="k0-rcw_ir_uc-1-4" onchange="collect()">
		<option value="0">rcw_from_ir</option>
		<option value="1" selected>rcw_from_uc</option>
	  </select> &nbsp;
	  carry_en: <select id="k0-carry_en-1-3" onchange="collect()">
		<option value="0">force_low</option>
		<option value="1" selected>pass</option>
	  </select>
	  load_flgs_mux: <select id="k0-load_flgs_mux-1-2" onchange="collect()">
		<option value="0">from_alu</option>
		<option value="1" selected>from_bus</option>
	  </select>
	  acn_ir_uc: <select id="k0-acn_ir_uc-1-1" onchange="collect()">
		<option value="0">acn_from_ir</option>
		<option value="1" selected>acn_from_uc</option>
	  </select>
	  ir0_en: <select id="k0-ir0_en-1-0" onchange="collect()">
		<option value="0">force_low</option>
		<option value="1" selected>pass</option>
	  </select>
	  </p>
	</form>
	<p>
	  <pre name=contents id=contents></pre>
	</p>
  </body>
</html>
<!--
// Save the text in the named file.
function download(filename, text) {
  var element = document.createElement('a');
  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
  element.setAttribute('download', filename);
  element.style.display = 'none';

  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
}

// Get a filename from the user (mandatory)
function openFile() {
  document.getElementById('inp').click();
}

// Read the selected filename (and for now, display
// it in a predefined location in on the screen - TBD)
function readFile(e) {
  var file = e.target.files[0];
  if (!file) return;
  var reader = new FileReader();
  reader.addEventListener("load", () => {
	// this will then display a text file
	contents.innerText = reader.result;
  }, false);

  reader.onload = function(e) {
	document.getElementById('contents').innerHTML = e.target.result;
  }
  reader.readAsText(file)
}

// Collect the values of all the controls in the form and
// assemble them into a string of [name:value] pairs.
function collect() {
	result = ""
	const forms = document.querySelectorAll('form');
	const form = forms[0];
	Array.from(form.elements).forEach((input) => {
	  console.log(input.value);
	  result += "[" + input.name + ":" + input.value + "]\n"
	});

	return result;
}
 -->

